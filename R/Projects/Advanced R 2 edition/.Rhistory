ref(x)
x <- c(1, 2, 3)
tracemem(x)
y <- x
y[1] <- 3
obj_addr(1:10)
x <- c(1L, 2L, 3L)
tracemem(x)
x[[3]] <- 4
a <- 1:10
b <- list(a, a)
c <- list(b, a, 1:10)
# reference tree
ref(c)
x <- list(1:10)
x[[2]] <- x
obj_size(letters)
obj_size(ggplot2::diamonds)
x <- rnorm(1e6)
obj_size(x)
y <- list(x, x, x)
obj_size(y)
list(NULL, NULL, NULL) %>% obj_size()
x <- c(1, 2, 3)
obj_addr(x)
# modify
x[1] <- -1
obj_addr(x)
x <- c(1, 2, 3)
obj_addr(x)
x %>% map_chr(obj_addr)
# modify
x[1] <- -1
# The address of x changed
obj_addr(x)
x <- c(1, 2, 3)
obj_addr(x)
x %>% map_chr(obj_addr)
# modify
x[1] <- -1
# The address of x changed
obj_addr(x)
x %>% map(obj_chr)
x <- c(1, 2, 3)
obj_addr(x)
x %>% map_chr(obj_addr)
# modify
x[1] <- -1
# The address of x changed
obj_addr(x)
x %>% map_chr(obj_addr)
x <- c(1, 2, 3)
obj_addr(x)
cat(obj_addr(x[1]), obj_addr(x[2]), obj_addr(x[3]))
# modify
x[1] <- -1
# The address of x changed
obj_addr(x)
x %>% map_chr(obj_addr)
x <- c(1, 2, 3)
obj_addr(x)
cat(obj_addr(x[1]), obj_addr(x[2]), obj_addr(x[3]), '\n')
# modify
x[1] <- -1
# The address of x changed
obj_addr(x)
x %>% map_chr(obj_addr)
x <- c(1, 2, 3)
obj_addr(x)
cat(obj_addr(x[1]), obj_addr(x[2]), obj_addr(x[3]), '\n')
# modify
x[1] <- -1
# The address of x changed
obj_addr(x)
cat(obj_addr(x[1]), obj_addr(x[2]), obj_addr(x[3]), '\n')
x <- c(1, 2, 3)
obj_addr(x)
# modify
x[1] <- -1
# The address of x changed
obj_addr(x)
fruit <- 'banana'
obj_size(fruit)
fruit %>% str_dup(100) %>% obj_size()
str_dup('banana', 10)
fruit <- 'banana'
obj_size(fruit)
fruit %>% rep(100) %>% obj_size()
'banana' %>% rep(10)
904 - 112
vector('character', 100) %>% obj_size()
vector('character', 100)
rep(NULL, 100) %>% obj_size()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lobstr)
# x and y poin to the same address
x <- c(1, 2, 3)
y <- x
x %>% obj_addr()
y %>% obj_addr()
`this is a non syntatic name` <- 3
`this is a non syntatic name`
a <- 1:10
b <- a
c <- b
d <- 1:10
obj_addr(a)
obj_addr(b)
obj_addr(c)
obj_addr(d)
obj_addrs(list(a, b, c, d))
mean
base::mean
get("mean")
evalq(mean)
match.fun("mean")
obj_addr(mean)
obj_addr(base::mean)
obj_addr(get('mean'))
obj_addr(evalq(mean))
obj_addr(match.fun('mean'))
x <- c(1, 2, 3)
y <- x
# x and y share the same memory address
obj_addrs(list(x, y)) %>% unique()
# modify y
y[1] <- -1
# y changed
y
# x does not change
x
# now the address of y changed
obj_addrs(list(x, y))
x <- c(1, 2, 3)
obj_addr(x)
# modify
x[1] <- -1
# The address of x changed
obj_addr(x)
x <- c(1, 2, 3)
tracemem(x)
y <- x
y[1] <- 3
obj_addr(1:10)
x <- c(1L, 2L, 3L)
tracemem(x)
x[[3]] <- 4
a <- 1:10
b <- list(a, a)
c <- list(b, a, 1:10)
# reference tree
ref(c)
x <- list(1:10)
x[[2]] <- x
obj_size(letters)
obj_size(ggplot2::diamonds)
x <- rnorm(1e6)
obj_size(x)
y <- list(x, x, x)
obj_size(y)
list(NULL, NULL, NULL) %>% obj_size()
fruit <- 'banana'
obj_size(fruit)
fruit %>% rep2(100) %>% obj_size()
fruit <- 'banana'
obj_size(fruit)
fruit %>% rep(100) %>% obj_size()
fruit <- 'banana'
obj_size(fruit)
fruit %>% rep(100) %>% obj_size()
x <- rnorm(100)
y <- rnorm(100)
obj_size(x)
obj_size(x, y)
x <- rnorm(100)
y <- x
obj_size(x)
obj_size(x, y)
obj_size(1:10)
obj_size(1:1e9)
obj_size(mean)
a <- runif(1e6)
obj_size(a)
obj_size(a) + obj_size(list(NULL, NULL))
b <- list(a, a)
obj_size(b)
obj_size(a, b)
values <- c(1, 2, 3)
obj_addr(values)
values[[3]] <- -1
obj_addr(values)
runif(10)
runif(10) %>% class()
object_size(vector())
obj_size(vector())
obj_size(list())
object_size(double())
obj_size(double())
a <- rnorm(1e6)
tracemem(a)
b <- list(a, a, a)
b[[1]] <- -1
b[[2]][[1]] <- -1
a <- c(1, 2, 3)
obj_size(a)
b <- a
obj_size(a, b)
b[[1]] <- 5
obj_size(a, b)
a <- c(1, 2, 3)
obj_size(a)
b <- a
# a and b reference to the same object
# so obj_size(a, b) is equal to obj_size(a)
object_size(a, b)
a <- c(1, 2, 3)
obj_size(a)
b <- a
# a and b reference to the same object
# so obj_size(a, b) is equal to obj_size(a)
obj_size(a, b)
b[[1]] <- 999
# when you modify, copy-on-modify will occur, create a new vector
# Now a and b do not share reference
# obj_size(a, b) will be doubled
obj_size(a, b)
e1 <- rlang::env(a = 1, b = 2, c = 3)
e1
e2 <- e1
e2$b <- -1
e1$b
e1 <- rlang::env(a = 1, b = 2, c = 3)
e2 <- e1
e2$b <- -1
# e1$b will also be changed to -1
e1$b
iris
attributes(iris)
name <- 'VN Pikachu'
att(name, 'game') <- 'Tank Force'
attr(name, 'game') <- 'Tank Force'
attributes(name)
structure(name, level = 31, country = 'Viet nam', class = 'list')
attributes(iris)
names(iris)
row.names(iris)
rownames(iris)
colnames(iris)
v <- matrix(1:12, nrow = 3, ncol = 4)
list(v, v)
data.frame(matrix = v, matrix2 = v + 1)
0x16
c(NA_character_, 1)
setNames
set_names
unname
NROW
structure(1:5, comment = 'OK')
is.atomic(NULL)
is_atomic(NULL)
is.vector(c(1, 2, 3))
is.vector(list(1, 2, 3))
is.vector(c(v = 1, c = 2))
is.vector(structure(c(1,2, 3), clan = 'VNC'))
is_vector(structure(c(1,2, 3), clan = 'VNC'))
is_numeric(lubridate::ymd(011006))
dim(letters)
NROW(letters)
?NROW
table(letters)
table(letters) %>% class()
table(letters) %>% typeof()
table(letters) %>% attributes()
c(list(1, 2, 3))
c(list(1, 2, 3), 1:5)
list_merge(list(1, 2), list(3, 4))
c(list(name = 11), list(name = 11))
list_merge(list(name = 11), list(name = 11))
list_merge(list(name = 11), list(name = 11)) %>% str()
mtcars
as_tibble(matcars)
as_tibble(mtcars)
?as_tibble
mtcars %>% rownames_to_column()
mtcars %>% rownames_to_column() %>% class()
iris %>% as.matrix()
print('Hello World!')
v <- matrix(1:12, nrow = 3, ncol = 4)
v
v[] <- 0
v
x <- 1:5
x[T]
x[F]
X[NA]
x[NA]
iris[iris$Species == 'setosa']
iris[iris$Species == 'setosa',]
upper.tri()
?upper.tri()
values <- matrix(1:9, nrow = 3, ncol = 3)
values
diag(values)
lower.tri(values)
lower.tri(values, T)
upper.tri(values)
upper.tri(values, T)
values[upper.tri(values)]
values
values[upper.tri(values, T)]
values <- 1:5
values[6]
values[[6]]
values[[integer(0)]]
values[[]]
values <- list(a = 1, b = 2)
values[[1]]
values[[3]]
values[[integer(0)]]
values[['d']]
values[[]]
NULL
NULL[[]]
NULL[[integer(0)]]
x <- list(
a = list(1, 2, 3),
b = list(3, 4, 5)
)
x
x %>% str()
library(tidyverse)
x %>% str()
x %>% pluck('a', 1)
x %>% pluck(list('a', 1))
x %>% pluck('d',  1, .defaul = '<missing>')
x %>% pluck('d',  1, .default = '<missing>')
mod <- lm(mpg ~ wt, data = mtcars)
mod
summary(mod)
summary(mod) %>% class()
summary(mod) %>% attributes()
resid(mod)
df(mod)
?df
args(d)
df(summary(mod))
attr(summary(mod), 'df')
summary(mod) %>% str()
mod %>% summary() %>% pluck(df)
mod %>% summary() %>% pluck('df')
mod %>% summary() %>% pluck('residuals')
mod %>% summary() %>% pluck('r.squared')
x <- 1:5
x
x[[3]] <- NULL
list(a = 1, b = 2, d = 3)
list[['b']] <- NULL
v <- list(a = 1, b = 2, d = 3)
v[['b']] <- NULL
v
v[5] <- 10
v
lookup <- c(m = "Male", f = "Female", u = NA)
lookup(c('m','f', 'm'))
rep(1:3, each = 1:#)
rep(1:3, each = 1:3)
rep(1:3, each = 1:3)
rep
?rep
rep(1:3, each = 2)
rep(1:3, each = 1:3)
rep(1:3, times = 1:3)
rep(1:4, 2)
rep(1:4, each = 2)
iris$Species <- NULL
iris %>% str()
iris[setdiff(names(iris), c('Sepal.Length', 'Sepal.Width'))]
switch("x", x = , y = 2, z = 3)
if(NA) 3
if(T) 3
if(F) 3
Y <- if(F) 3
Y
ifelse(TRUE, 1, "no")
ifelse(FALSE, 1, "no")
ifelse(NA, 1, "no")
?ifelse
if(0) 5
if(1) 5
if('name') 5
if(10) 5
x <- numeric()
out <- vector("list", length(x))
for (i in 1:length(x)) {
out[i] <- x[i] ^ 2
}
ou
x <- numeric()
out <- vector("list", length(x))
for (i in 1:length(x)) {
out[i] <- x[i] ^ 2
}
out
x <- 10
f1 <- function(x) {
function() {
x + 10
}
}
f1(1)()
is.function(add)
is.function(cu)
is.function(cut)
is.primitive(sum)
is.primitive(mean)
mget(ls("package:base", all = TRUE), inherits = TRUE) %>% keep(is.function)
fs <- mget(ls("package:base", all = TRUE), inherits = TRUE) %>% keep(is.function)
fs %>% class()
fs %>% map(formals) %>% map_int(length)
length(formals(library))
sum
print(['VN Pikachu'])
`names<-`
source('~/.active-rstudio-document')
library(lobstr)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(lobstr)
source('~/.active-rstudio-document')
x <- list(1, 2, 3)
y <- x
obj_size(x, y)
obj_size(x)
y[[1]] <- 999
obj_size(x)
obj_size(y)
obj_size(x, y)
obj_size(x, y) - obj_size(x)
obj_size(list)
obj_size(list(2))
obj_addr(x)
obj_addr(y)
ref(x, y)
obj_size(dbl)
obj_size(double())
obj_size(list(NULL, NULL, NULL))
obj_size(list(NULL, NULL, NULL)) + obj_size(double())
x <- c(1, 4, 5)
y <- x
obj_addr(x)
obj_addr(y)
ref(x, y)
y[[1]] <- -1
ref(x, y)
obj_size(x)
obj_size(y)
obj_size(x, y)
apropos()
?apropos
apropos('<-')
v <- list(1:10, na.rm = T)
do.call(mean, v)
library(rlan)
library(rlang)
e <- env(a = 1, b = 2, c = 'VN Pikachu')
e
print_env(e)
env_print(e)
search()
parent.env(globalenv())
ls.str(e)
env_names(e)
current_env()
environment()
globalenv() == environment()
identical(globalenv(), environment())
e2a <- env(d = 4, e = 5)
e2b <- env(e2a, a = 1, b = 2, c = 3)
env_parent(e2a)
env_parent(e2b)
parent.env(e2a)
parent.env(e2b)
env_parents(gobalenv())
env_parents(globalenv())
env_parents(e2b)
env_parents(e2b)
env_parents(e2b, last = emptyenv())
x <- 2
f <- function() {
x <<- 1
}
f()
x
e2a
e
ls(e)
env_names(e)
e$a
e[['a']]
env_get(e, 'a')
env_get('e', 'z')
e$z
env_get(e, 'xyz', default = '<missing>')
env_poke(e, 'xyz', 3)
ls.str(e)
env_bind(e, trung = 1, kien = 2)
ls.str(e)
env_has(e, 'xyz')
env_has(e, 'q')
