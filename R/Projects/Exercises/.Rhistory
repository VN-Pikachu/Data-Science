col_types = cols(
A9 = 'c',                   # According to crx.names, A9, A10, A12 type character
A10 = 'c',                  # the value of 2 columns are t, f. If do not specifically specify
A12 = 'c'                   # they will be parse as logical
A11 = 'd'
credit <- read_csv('Data/crx.txt',
col_names = str_c('A', 1:16),   # this file does not have header
na = c('?'),                    # in this file, missing value is marked as ?
col_types = cols(
A9 = 'c',                   # According to crx.names, A9, A10, A12 type character
A10 = 'c',                  # the value of 2 columns are t, f. If do not specifically specify
A12 = 'c',                  # they will be parse as logical
A11 = 'd'
)
)
# column specification of imported data
spec(credit)
credit %>% glimpse()
credit <- read_csv('Data/crx.txt',
col_names = str_c('A', 1:16),   # this file does not have header
na = c('?'),                    # in this file, missing value is marked as ?
col_types = cols(
A9 = 'c',                   # According to crx.names, A9, A10, A12 type character
A10 = 'c',                  # the value of 2 columns are t, f. If do not specifically specify
A12 = 'c',                  # they will be parse as logical
A11 = 'd'
A14 = 'd'
credit <- read_csv('Data/crx.txt',
col_names = str_c('A', 1:16),   # this file does not have header
na = c('?'),                    # in this file, missing value is marked as ?
col_types = cols(
A9 = 'c',                   # According to crx.names, A9, A10, A12 type character
A10 = 'c',                  # the value of 2 columns are t, f. If do not specifically specify
A12 = 'c',                  # they will be parse as logical
A11 = 'd',
A14 = 'd'
)
)
# column specification of imported data
spec(credit)
credit %>% glimpse()
credit %>% summary()
credit %>% count(A1)
# Missing value in each column
credit %>%
summarize(across(everything, ~ sum(is.na(.))))
# Missing value in each column
credit %>%
summarize(across(everything(), ~ sum(is.na(.))))
# class distribution
credit %>% count(last_col())
# class distribution
credit %>% count(A16)
args(count)
# class distribution
credit %>% count(A16) %>% mutate(prop = n / sum(n))
# class distribution
credit %>% count(A16) %>% mutate(prop = n / sum(n) * 100)
# proportion of row having at least 1 missing value
credit %>% complete.cases() %>% mean()
# proportion of row having at least 1 missing value
credit %>%
mutate(anymiss = complete.cases(cur_data())) %>%
summarise(missing_cases = sum(anymiss), prop = missing_cases / n())
# proportion of row having at least 1 missing value
credit %>%
mutate(anymiss = complete.cases(cur_data())) %>%
summarise(missing_cases = sum(!anymiss), prop = missing_cases / n())
# proportion of row having at least 1 missing value
credit %>%
mutate(anymiss = complete.cases(cur_data())) %>%
summarise(missing_cases = sum(!anymiss), prop = missing_cases / n() * 100)
credit %>% filter(where(is.numeric()))
credit %>% filter(where(is.numeric)
)
credit %>% filter(where(is.numeric))
?where
where
library(tidyselect)
credit %>% filter(where(is.numeric))
credit %>% select(where(is.numeric))
library(dplyr)
credit %>% select(where(is.numeric))
select
credit %>% dplyr::select(where(is.numeric))
credit %>% count(A1)
credit %>% count(A4)
credit %>% count(A5)
View(credit)
credit %>% count(A6)
credit %>% count(A7)
credit %>% count(A9)
credit %>% count(A10)
credit %>% count(A12)
credit %>% count(A13)
credit %>% count(A16)
credit %>% tbl_sum()
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
Acmena
Acmena %>%
ggplot(aes(dbh, wood)) +
geom_smooth(method = 'lm') +
scale_x_log10() +
scale_y_log10()
Acmena %>%
ggplot(aes(dbh, wood)) +
geom_smooth(method = 'lm') +
geom_point() +
scale_x_log10() +
scale_y_log10()
ls()
globalenv()[ls()]
ls() %>% map_dbl(~ lobstr::obj_size(get(.)))
ls() %>% map(~ lobstr::obj_size(get(.)))
ls() %>% set_names() %>% map_dbl(~ lobstr::obj_size(get(.)))
object_sizes <- ls() %>% set_names() %>% map_dbl(~ lobstr::obj_size(get(.)))
object_sizes
object_sizes <- ls() %>% set_names() %>% map_dbl(~ lobstr::obj_size(get(.)))
object_sizes %>% enframe('object', 'size')
object_sizes <- ls() %>% set_names() %>% map_dbl(~ lobstr::obj_size(get(.)))
object_sizes %>% enframe('object', 'size') %>% arrange(desc(size))
system.time()
?system.time
system.time(matrix(runif(480000)))
install.packages('gamair')
library(gamair)
data(hubble)   # loading data into the workspace
?hubble
hubble
hubble %>%
ggplot(aes(x, y)) +
geom_point()
hubble %>% glimpse()
hubble %>%
ggplot(aes(x, y)) +
geom_point()
hubble
hubble %>% head()
kmTOmegaparsec <- 3.09*10^(-19)
mod <- lm(I(y * kmTOmegaparsec) ~ x - 1, data = hubble)
coef(mod)
mod %>% attributes()
mod$coefficients
slope <- coef(mod)$x
slope <- coef(mod) %>% pluck('x')
slope
(1 / slope) / (602 * 24 * 365)
kmTOmegaparsec <- 3.09*10^(-19)
# fitting a linear model
mod <- lm(I(y * kmTOmegaparsec) ~ -1 + x, data = hubble)
slope <- coef(mod) %>% pluck('x')
slope
(1 / slope) / (602 * 24 * 365)
13 * 109
(1 / slope) / (60 * 60 * 24 * 365)
(1 / slope) / (60 * 60 * 24 * 365) / 10^9
(1 / slope) / (60 * 60 * 24 * 365) - 13 * 10 ^ 9
(1 / slope) / (60 * 60 * 24 * 365)
mod1 <- lm(log(y) ~ 1 + offset(log(x)), data = hubble)
slope1 <- mod1 %>% coef() %>% pluck('x')
slope1
mod1 <- lm(log(y) ~ 1 + offset(log(x)), data = hubble)
slope1 <- mod1 %>% coef()
slope1
offset
?offset
mod1 <- lm(log(y) ~ 1 + offset(log(x)), data = hubble)
slope1 <- mod1 %>% coef()
slope1
mod1 <- lm(log(y) ~ 1 + (log(x)), data = hubble)
slope1 <- mod1 %>% coef()
slope1
mod1 <- lm(log(y) ~ (log(x)), data = hubble)
slope1 <- mod1 %>% coef()
slope1
mod1 <- lm(log(y) ~ -1 + (log(x)), data = hubble)
slope1 <- mod1 %>% coef()
slope1
mod1 <- lm(log(y) ~ (log(x)), data = hubble)
slope1 <- mod1 %>% coef()
slope1
1 + 2
`+`(1, 2)
stones <- array(c(81, 6, 234, 36, 192, 71, 55, 25), dim = c(2,
+ 2, 2), dimnames = list(Sucess = c("yes", "no"), Method = c("open",
+ "ultrasound"), Size = c("<2cm", ">=2cm")))
stones <- array(c(81, 6, 234, 36, 192, 71, 55, 25), dim = c(2,2, 2), dimnames = list(Sucess = c("yes", "no"), Method = c("open","ultrasound"), Size = c("<2cm", ">=2cm")))
stones
stones <- array(c(81, 6, 234, 36, 192, 71, 55, 25), dim = c(2,2, 2), dimnames = list(Sucess = c("yes", "no"), Method = c("open","ultrasound"), Size = c("<2cm", ">=2cm")))
stones
stones <- array(c(81, 6, 234, 36, 192, 71, 55, 25), dim = c(2,2, 2), dimnames = list(Sucess = c("yes", "no"), Method = c("open","ultrasound"), Size = c("<2cm", ">=2cm")))
stones %>% print()
stones <- array(c(81, 6, 234, 36, 192, 71, 55, 25), dim = c(2,2, 2), dimnames = list(Sucess = c("yes", "no"), Method = c("open","ultrasound"), Size = c("<2cm", ">=2cm")))
stones
stones %>% apply(MARGIN = 3, colMeans)
stones %>% apply(MARGIN = 3, function(x) x / colSums(x))
values <- matrix(1:12, nrow = 3, ncol = 4)
values
values %>% colSums()
values <- matrix(1:12, nrow = 3, ncol = 4, colnames = c('a', 'b', 'c', 'd'), rownames = 1:3)
args(matrix)
?matrix
values <- matrix(1:12, nrow = 3, ncol = 4, dimnames = list(LETTERS[1:3], letters[1:4]))
values
values %>% colSums()
args(colSums)
?colSums
values / colSums(values)
stones %>% apply(MARGIN = 3, function(x) print(x))
stones %>% apply(MARGIN = 3, function(x) print(x)) %>% invisible()
stones %>% apply(MARGIN = 3, function(x) print(x / colSums(x))) %>% invisible()
stones %>% apply(MARGIN = 3, function(x) x / colSums(x))
?apply
stones %>% apply(MARGIN = 3, function(x) colSums(x))
stones %>% apply(MARGIN = 3, function(x) x / colSums(x))
stones %>% apply(MARGIN = 3, function(x) colSums(x))
stones %>% apply(MARGIN = 3, function(x) x)
stones %>% modify(function(x) x)
stones %>% modify(function(x) colSums(x))
stones %>% modify(function(x) print(x))
mosaicplot(stones, sort=3:1)
success_rate <- function(arr) {
arr / colsum(arr)
}
success_rate <- function(arr) {
arr / colsum(arr)
}
for (i in seq(2)) {
stones[,,i] <- success_rate(stone[,,i])
}
success_rate <- function(arr) {
arr / colsum(arr)
}
for (i in seq(2)) {
stones[,,i] <- success_rate(stones[,,i])
}
success_rate <- function(arr) {
arr / colSums(arr)
}
for (i in seq(2)) {
stones[,,i] <- success_rate(stones[,,i])
}
stones
success_rate <- function(arr) {
cbind(arr, arr / colSums(arr))
}
for (i in seq(2)) {
stones[,,i] <- success_rate(stones[,,i])
}
stones_success <- stones %>% apply(MARGIN = 3, function(x) x[1, ] / (x[1, ] + x[2, ]))
stones_success <- stones %>% apply(MARGIN = 3, function(x) x[1, ] / (x[1, ] + x[2, ]))
stones_success
stones_success_rate <- stones %>% apply(MARGIN = 3, function(x) x[1, ] / (x[1, ] + x[2, ]))
stones_success_rate
stones_success_rate <- stones %>% apply(MARGIN = 3, function(x) x[1, ] / colSums(x))
stones_success_rate
81 / (6 + 81)
stones_success_rate <- stones %>% apply(MARGIN = 3, print(x))
print('Hello World!')
print('Hello World!')
library(tidyverse)
library(DAAG)
library(MASS)
rainforest <- as_tibble(rainforest)
rainforest
rainforest %>% group_by(species) %>% summarize(n_missing = sum(is.na(root)))
Pima.tr2
Pima.tr2 %>% summarize(across(everything(), ~ sum(is.na(.))))
Pima.tr2 %>% summary()
dim(tinting)
dim(possum)
dim(possumsites)
tinting %>% tbl_sum()
possum %>% tbl_sum()
possumsites %>% tbl_sum()
mean(1:21)
range(1:21)
# The mean of range of 50 random normal values
data <- rnorm(50)
mean(data)
range(data)
head(rainforest)
# The number of observtion for each species
rainforest %>% count(species)
rainforest %>% filter(species != 'C. fraseri')
ais
ais %>% glimpse()
# unique sports
ais %>% pull(sport) %>% levels()
# extract the data for the rower
ais %>% filter(sport == 'Row')
# extract the data for the rowers, the netballs and the tennis players
ais %>% filter(sport %in% c('Tennis', 'Netball','Row'))
# extract the data for the female basketballers and rowers
ais %>% filter(sport %in% c('B_Ball', 'Row'), sex == 'f')
Acmena <- rainforest %>% filter(species == 'Acmena smithii')
# untransformed scale
Acmena %>% ggplot(aes(dbh, wood)) + geom_point()
# log scale
Acmena %>% ggplot(aes(dbh, wood)) +
geom_point() +
geom_smooth(method = 'lm', color = 'red') +
scale_y_continuous(trans = 'log2') +
scale_x_continuous(trans = 'log2') +
theme_bw()
orings
orings_data <- orings %>% mutate(pre_launched = row_number() %in% c(1, 2, 4, 11, 13, 18))
orings_data
# Plot only the rows that were included in the pre-launch charts.
orings_data %>%
filter(pre_launched) %>%
ggplot(aes(Temperature, Total)) +
geom_point()
# Plot all rows
orings_data %>%
ggplot(aes(Temperature, Total)) +
geom_point()
# Plot all rows, using different symbols or colors to indicate whether or not points were included
# in the pre-launch charts.
orings_data %>%
ggplot(aes(Temperature, Total, color = pre_launched)) +
geom_point() +
scale_color_brewer(palette = 'Set1') +
theme_bw()
oddbooks
# weight vs volume
oddbooks %>%
mutate(volume = thick * height * breadth) %>%
ggplot(aes(volume, weight)) +
geom_point()
# density and volume
oddbooks %>%
mutate(volume = thick * height * breadth, density = weight / volume) %>%
ggplot(aes(density, volume)) +
geom_point()
# density and page area
oddbooks %>%
mutate(density = weight / height / thick / breadth, area = height * breadth) %>%
ggplot(aes(area, density)) +
geom_point()
cabbages
cabbages%>%
ggplot(aes(Date, HeadWt)) +
geom_dotplot(binaxis = 'y', stackdir = 'center') +
facet_wrap(~ Cult, labeller = 'label_both') +
theme_light()
nsw74psid3 %>%
mutate(trt = as.factor(trt)) %>%
pivot_longer(c(age, educ, re74, re75),
names_to = 'variables',
values_to = 'value') %>%
ggplot(aes(trt, value)) +
geom_dotplot(binaxis = 'y', stackdir = 'center') +
facet_wrap(~ variables, scales = 'free')
nswpsid1
Acmena %>%
arrange(dbh)
possumsites %>%
rownames_to_column() %>%
arrange(rowname) %>%
column_to_rownames()
1:10 %>% walk(~ cat(., . * ., . *. * ., '\n'))
cabbages %>% dplyr::select(where(is.numeric))
allbacks %>% str()
allbacks %>% rownames()
allbacks %>% names()
allbacks %>% dim()
nswpsid1 %>% glimpse()
nswpsid1 %>%
mutate(category = case_when(
black == 1 ~ 'black',
hisp == 1 ~ 'hispanic',
T ~ 'neither black or hispanic'
), .before = 1)
rockArt
rockArt1 <- rockArt %>%
mutate(groupDis = District %>% fct_lump_min(5))
rockArt1 %>% count(groupDis)
rainforest %>% count(species)
rainforest %>%
filter(species == 'Acmena smithii') %>%
ggplot(aes(dbh, ..density..)) +
geom_histogram(binwidth = 1) +
theme_light()
Pima.tr2 %>% summary()
# Determine the number of missing values in each column, broken down by `type`.
Pima.tr2 %>%
group_by(type) %>%
summarise(across(everything(), ~ sum(is.na(.))))
p2 <- Pima.tr2 %>% mutate(anymiss = complete.cases(cur_data()))
p2
p2 %>%
group_by(type, anymiss) %>%
summarize(across(everything(), mean, na.rm = T), n = n())
# For each level of `type`, the number of missing values
p2 %>%
group_by(type) %>%
summarize(n_missing =sum(anymiss))
stripplot(anymiss ~ npreg + glu | type, data=p2, outer=TRUE,
scales=list(relation="free"), xlab="Measure")
p2 %>%
mutate(type = c(No = 'No diabete', Yes = 'Diebete')[type]) %>%
pivot_longer(c(npreg, glu, skin),
names_to = 'variables',
values_to = 'value') %>%
ggplot(aes(value, color = factor(anymiss))) +
geom_density() +
geom_rug() +
facet_wrap(type ~ variables, scales = 'free', labeller = partial(label_value, multi_line = F))
# Take a look at the first 15 rows of the file
head(read_lines('Data/bostonc.txt'), 15)
# skip first 9 rows that are description about the file
boston <- read_tsv('Data/bostonc.txt', skip = 9)
boston
credit <- read_csv('Data/crx.txt',
col_names = str_c('A', 1:16),   # this file does not have header
na = c('?'),                    # in this file, missing value is marked as ?
col_types = cols(
A9 = 'c',                   # According to crx.names, A9, A10, A12 type character
A10 = 'c',                  # the value of 2 columns are t, f. If do not specifically specify
A12 = 'c',                  # they will be parse as logical
A11 = 'd',
A14 = 'd'
)
)
# column specification of imported data
spec(credit)
credit %>% glimpse()
credit %>% summary()
# proportion of row having at least 1 missing value
credit %>%
mutate(anymiss = complete.cases(cur_data())) %>%
summarise(missing_cases = sum(!anymiss), prop = missing_cases / n() * 100)
# Missing value in each column
credit %>%
summarize(across(everything(), ~ sum(is.na(.))))
# class distribution
credit %>% count(A16) %>% mutate(prop = n / sum(n) * 100)
Acmena %>%
ggplot(aes(dbh, wood)) +
geom_smooth(method = 'lm') +
geom_point() +
scale_x_log10() +
scale_y_log10()
object_sizes <- ls() %>% set_names() %>% map_dbl(~ lobstr::obj_size(get(.)))
object_sizes %>% enframe('object', 'size') %>% arrange(desc(size))
library(gamair)
data(hubble)   # loading data into the
hubble %>% glimpse()
hubble %>%
ggplot(aes(x, y)) +
geom_point()
kmTOmegaparsec <- 3.09*10^(-19)
# fitting a linear model
mod <- lm(I(y * kmTOmegaparsec) ~ -1 + x, data = hubble)
slope <- coef(mod) %>% pluck('x')
slope
(1 / slope) / (60 * 60 * 24 * 365)
mod1 <- lm(log(y) ~ (log(x)), data = hubble)
slope1 <- mod1 %>% coef()
slope1
1 + 2
`+`(1, 2)
stones <- array(c(81, 6, 234, 36, 192, 71, 55, 25), dim = c(2,2, 2), dimnames = list(Sucess = c("yes", "no"), Method = c("open","ultrasound"), Size = c("<2cm", ">=2cm")))
stones
print('Hello World!')
mosaicplot(stones, sort=3:1)
stones %>% modify(function(x) print(x))
stones %>% apply(MARGIN = 3, function(x) x[1, ] / colSums(x))
stones_success_rate <- stones %>% apply(MARGIN = 3, function(x) x[1, ] / colSums(x))
stones_success_rate
success_rate <- function(x) x[1, ] / colSums(x)
# overall success rate
overall_success_rate <- success_rate(stones[,,1] + stones[,,2])
overall_success_rate
# Success rates for the two different stone sizes separately
stones_success_rate <- stones %>% apply(MARGIN = 3, success_rate)
stones_success_rate
mosaicplot(stones, sort=3:1)
mosaicplot(stones_success_rate, sort=3:1)
mosaicplot(stones, sort=3:1)
nassCDS
?nassCDS
nassCDS
nassCDS %>%
count(airbag, dead)
nassCDS %>%
count(airbag, dead) %>%
pivot_wider(names_from = !n, values_from = n)
nassCDS %>%
count(airbag, dead) %>%
pivot_wider(names_from = dead, values_from = n)
install.packages('DAAGextra')
install.packages('DAAGxtras')
library(DAAGxtras)
install.packages(DAAGxtras)
install.packages('DAAGxtras')
nassCDS %>%
count(airbag, dead) %>%
pivot_wider(names_from = airbag, values_from = n)
nassCDS %>%
count(airbag, dead) %>%
pivot_wider(names_from = dead, values_from = n)
nassCDS %>% glimpse()
airbag_stat <- nassCDS %>%
count(airbag, dead) %>%
pivot_wider(names_from = dead, values_from = n)
airbag_stat
airbag_stat %>%
mutate(prop = dead / (alive + dead))
airbag_stat %>%
mutate(dead_prop = dead / (alive + dead))
